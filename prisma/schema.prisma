// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = []
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  //@db.Text
    access_token      String?  //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    runProfile    RunProfile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model RunProfile {
    id String @id @default(cuid())
    slug String @unique
    name String
    userId String
    /// [ProfileHighlightRunType]
    highlightRun Json
    /// [ProfileWeekStatsType]
    weekStats Json
    /// [ProfileShoesType]
    shoes Json
    /// [ProfileEventsType]
    events Json

    shoeRotations ShoeRotation[]
    races Race[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User @relation(fields:[userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model ShoeRotation {
    id String @id @default(cuid())
    slug String @unique
    startDate DateTime
    name String
    description String
    profileId String
    /// [ShoeRotationShoeType]
    shoes Json[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    runProfile RunProfile @relation(fields:[profileId], references: [id], onDelete: Cascade)
}

model Race {
    id String @id @default(cuid())
    slug String @unique
    profileId String
    workout_type String?
    start_date DateTime
    name String
    description String
    moving_time Int
    elapsed_time Int
    distance Float
    total_elevation_gain Float
    start_latlng String?
    end_latlng String?
    summary_polyline String?
    /// [RaceLapType]
    laps Json[]
    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    runProfile RunProfile @relation(fields:[profileId], references: [id], onDelete: Cascade)
}